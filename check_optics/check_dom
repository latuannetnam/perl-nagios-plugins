#!/usr/bin/perl
#
#    check_dom nagios plugin: Monitor Optical DOM (Digital Optical Monitoring)
#    Copyright (C) 2019 Le Anh Tuan (tuan.la@netnam.vn/latuannetnam@gmail.com)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;
use 5.008;
use Nagios::Monitoring::Plugin;
use Net::SNMP;
use Data::Dumper;

my $STATEDIR = '/var/tmp';
my $POWER_MUL_HP = 0.001;
my $POWER_WATT_MUL_HP = 0.0001;
my $CURRENT_MUL_HP =  0.001;
my $TEMPERATURE_MUL_HP = 0.001;
my $POWER_MUL_JUNIPER = 0.01;
my $CURRENT_MUL_JUNIPER =  0.001;


my $OIDS_INTERFACE = {
	ifName => '.1.3.6.1.2.1.31.1.1.1.1',
	ifDescr => '.1.3.6.1.2.1.2.2.1.2',
};

my $OIDS_OPTICS_HP = {
	currentBias => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.13',
	currentBiasHiAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.26',
	currentBiasLoAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.27',
	currentBiasHiWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.28',
	currentBiasLoWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.29',
	rxPower => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.15',
	rxPwrHiAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.34',
	rxPwrLoAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.35',
	rxPwrHiWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.36',
	rxPwrLoWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.37',
	txPower => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.14',
 	txPwrHiAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.30',
	txPwrLoAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.31',
	txPwrHiWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.32',
	txPwrLoWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.33',
	temperature => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.11',
	tempHiAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.18',
	tempLoAlarm => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.19',
	tempHiWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.20',
	tempLoWarn => '.1.3.6.1.4.1.11.2.14.11.5.1.82.1.1.1.1.21',
};

my $OIDS_OPTICS_JUNIPER = {
	currentBias => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.6',
	currentBiasHiAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.13',
	currentBiasLoAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.14',
	currentBiasHiWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.15',
	currentBiasLoWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.16',
	rxPower => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.5',
	rxPwrHiAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.9',
	rxPwrLoAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.10',
 	rxPwrHiWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.11',
	rxPwrLoWarn  => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.12',
	txPower => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.7',
	txPwrHiAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.17',
	txPwrLoAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.18',
	txPwrHiWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.19',
	txPwrLoWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.20',
	temperature => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.8',
	tempHiAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.21',
	tempLoAlarm => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.22',
	tempHiWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.23',
	tempLoWarn => '.1.3.6.1.4.1.2636.3.60.1.1.1.1.24',
	
};	

sub compute_realspeed
{
	my $ifinfo = shift;

	if ($ifinfo->{ifSpeed} == 4294967295)
	{
		return $ifinfo->{ifHighSpeed} * 1000000;
	}

	return $ifinfo->{ifSpeed};
}

sub sanitize_fname($)
{
	my $name = shift;
	$name =~ s/[^0-9a-z_-]/_/gi;
	return $name;
}

sub get_ifid($$$)
{
	my $np = shift or die;
	my $snmp_session = shift or die;
	my $ifdescr = shift or die;

	my $result = $snmp_session->get_table(-baseoid => $OIDS_INTERFACE->{ifName});
	$np->nagios_die('get_ifid: ' . $snmp_session->error()) if !defined $result;

	foreach my $ifid (keys %$result)
	{
		# print "ifid:$ifid. name: $result->{$ifid}\n";
		if ($result->{$ifid} eq $ifdescr)
		{
			$ifid =~ s/$OIDS_INTERFACE->{ifName}\.//;
			return $ifid;
		}
	}
	# check ifDesc if not match interface name
	$result = $snmp_session->get_table(-baseoid => $OIDS_INTERFACE->{ifDescr});
	$np->nagios_die('get_ifid: ' . $snmp_session->error()) if !defined $result;

	foreach my $ifid (keys %$result)
	{
		# print "ifid:$ifid. name: $result->{$ifid}\n";
		if ($result->{$ifid} eq $ifdescr)
		{
			$ifid =~ s/$OIDS_INTERFACE->{ifDescr}\.//;
			return $ifid;
		}
	}


	return undef;
}

sub get_cached_ifinfo($$$)
{
	my $np = shift or die;
	my $hostname = shift or die;
	my $ifdescr = shift or die;
	my $fd;

	my $datafile = $np->opts->datadir . '/check_dom/' . $hostname . '/' . sanitize_fname($ifdescr) . '.dat';
	
	return undef if (!-e $datafile);

	if (!open($fd, '<', $datafile))
	{
		$np->nagios_die("unable to open datafile '$datafile': $!");
	}
	read($fd, my $content, 8192);
	close($fd);

	my $data = eval($content);
	$np->nagios_die("invalid data in datafile '$datafile': $@") if $@;
	return $data;

	return undef;
}

sub save_cached_ifinfo($$$$)
{
	my $np = shift or die;
	my $hostname = shift or die;
	my $ifdescr = shift or die;
	my $ifinfo = shift or die;
	my $fd;

	if (! -d ($np->opts->datadir . '/check_dom/' . $hostname))
	{
		if (! -d ($np->opts->datadir . '/check_dom'))
		{
			mkdir $np->opts->datadir . '/check_dom'
				or $np->nagios_die($!);
		}
		mkdir $np->opts->datadir . '/check_dom/' . $hostname
			or $np->nagios_die($!);
	}

	my $datafile = $np->opts->datadir . '/check_dom/' . $hostname . '/' . sanitize_fname($ifdescr) . '.dat';
	
	if (!open($fd, '>', $datafile . '.new'))
	{
		$np->nagios_die("unable to open datafile '$datafile.new': $!");
	}

	print $fd Data::Dumper->new([$ifinfo])->Terse(1)->Purity(1)->Dump();
	close($fd);
	if (!rename($datafile . '.new', $datafile))
	{
		$np->nagios_die("unable to rename datafile '$datafile.new' to '$datafile': $!");
	}
}

sub log10($) {
        my $n = shift;
        return log($n)/log(10);
    }

# Convert power from mW to dBm
sub watt2dBm($$)
{
	my $np = shift or die;
	my $power_in = shift or $np->nagios_die("No power_in");;
	my $power_out = 10 * log10($power_in);
	# print "Power out: $power_out\n";
	return $power_out;
}

sub get_optics($$$$)
{
	my $np = shift or die;
	my $snmp_session = shift or die;
	my $ifid = shift or die;
	my $os = shift or die;

	my $oids;
	if ($os eq "Juniper")
	{
		$oids = $OIDS_OPTICS_JUNIPER;
	}
	elsif ($os eq "HP") {
		$oids = $OIDS_OPTICS_HP;
	}
	else {
		$np->nagios_die("Unkown OS: $os");
	}
	
	my @oids_list = ();
	foreach my $item (keys %$oids)
	{
		push @oids_list, "$oids->{$item}.$ifid";
	}
	my $result = $snmp_session->get_request(-varbindlist => [@oids_list]);
	$snmp_session->close();
	$np->nagios_die('get_optics: ' . $snmp_session->error()) if (!defined $result);
	my $ifinfo = {};

	foreach my $item (keys %$oids)
	{
		
		$ifinfo->{$item} = $result->{"$oids->{$item}.$ifid"};
		if ($os eq "Juniper")
		{
			if ($item =~ /Power/)
			{
				$ifinfo->{$item} = $ifinfo->{$item} * $POWER_MUL_JUNIPER;
			}
			elsif ($item =~ /Bias/) {
				$ifinfo->{$item} = $ifinfo->{$item} * $CURRENT_MUL_JUNIPER;
			}	
		}
		elsif ($os eq "HP") {
			if ($item =~ /Power/)
			{
				$ifinfo->{$item} = $ifinfo->{$item} * $POWER_MUL_HP;
			}
			elsif ($item =~ /Bias/) {
				$ifinfo->{$item} = $ifinfo->{$item} * $CURRENT_MUL_HP;
			}
			elsif ($item =~ /temp/) {
				# convert from 1/1000 degree to degree
				$ifinfo->{$item} = $ifinfo->{$item} * $TEMPERATURE_MUL_HP;
			}
			elsif ($item =~ /Pwr/) {
				# convert from 1/10 microWatt to milliWatt
				$ifinfo->{$item} = watt2dBm($np, $ifinfo->{$item} * $POWER_WATT_MUL_HP);
			}
		}
		
		


	}
	# print Data::Dumper->new([$ifinfo])->Terse(1)->Purity(1)->Dump();
	#----------------------------------------
	# Performance Data
	#----------------------------------------
	# print "warning: $ifinfo->{rxPwrLoWarn}:$ifinfo->{rxPwrHiWarn} \n";
	# $ifinfo->{rxPower} = -17.5;
	# $ifinfo->{txPower} = -9; 
	# $ifinfo->{temperature} = 90;
	# $ifinfo->{currentBias} = 0.5;
	my $power_delta = 0;
	my $current_delta = 0;
	my $temp_delta = 0;
	if ($np->opts->currentdelta)
	{
		$current_delta = $np->opts->currentdelta;
	}
	if ($np->opts->powerdelta)
	{
		$power_delta = $np->opts->powerdelta;
	}
	if ($np->opts->tempdelta)
	{
		$temp_delta = $np->opts->tempdelta;
	}
	
	# print("current delta:$current_delta, power delta:$power_delta, temp delta:$temp_delta \n");
	my $currentBiasLoWarn = $ifinfo->{currentBiasLoWarn} + $current_delta;
	my $currentBiasHiWarn = $ifinfo->{currentBiasHiWarn} - $current_delta;
	my $currentBiasLoAlarm	=  $ifinfo->{currentBiasLoAlarm} + $current_delta;
	my $currentBiasHiAlarm = $ifinfo->{currentBiasHiAlarm} - $current_delta;

	my $rxPwrLoWarn = $ifinfo->{rxPwrLoWarn} + $power_delta;
	my $rxPwrHiWarn = $ifinfo->{rxPwrHiWarn} - $power_delta;
	my $rxPwrLoAlarm = $ifinfo->{rxPwrLoAlarm} + $power_delta;
	my $rxPwrHiAlarm =  $ifinfo->{rxPwrHiAlarm} - $power_delta;

	my $txPwrLoWarn = $ifinfo->{txPwrLoWarn} + $power_delta;
	my $txPwrHiWarn = $ifinfo->{txPwrHiWarn} - $power_delta;
	my $txPwrLoAlarm = $ifinfo->{txPwrLoAlarm} + $power_delta;
	my $txPwrHiAlarm =  $ifinfo->{txPwrHiAlarm} - $power_delta;

	my $tempLoWarn = $ifinfo->{tempLoWarn} + $temp_delta;
	my $tempHiWarn = $ifinfo->{tempHiWarn} - $temp_delta;
	my $tempLoAlarm = $ifinfo->{tempLoAlarm} + $temp_delta;
	my $tempHiAlarm = $ifinfo->{tempHiAlarm} - $temp_delta; 


	if (!$np->opts->noperfdata)
	{
		$np->add_perfdata(label => "bias_current", 
				value => $ifinfo->{currentBias},
				min =>  sprintf("%.2f", $currentBiasLoAlarm),
				max => sprintf("%.2f", $currentBiasHiAlarm),
				warning => sprintf("%.2f:%.2f", 
								   $currentBiasLoWarn,
								   $currentBiasHiWarn), 
				critical => sprintf("%.2f:%.2f",
								   $currentBiasLoAlarm,
								   $currentBiasHiAlarm)
				);

		$np->add_perfdata(label => "rx_power", 
				value => $ifinfo->{rxPower},
				min => sprintf("%.2f", $rxPwrLoAlarm),
				max => sprintf("%.2f", $rxPwrHiAlarm),
				warning => sprintf("%.2f:%.2f", 
								   $rxPwrLoWarn,
								   $rxPwrHiWarn), 
				critical => sprintf("%.2f:%.2f",
								   $rxPwrLoAlarm,
								   $rxPwrHiAlarm)
				);
		
		$np->add_perfdata(label => "tx_power", 
				value => $ifinfo->{txPower}, 
				min => sprintf("%.2f", $txPwrLoAlarm),
				max => sprintf("%.2f", $txPwrHiAlarm),
				warning => sprintf("%.2f:%.2f", 
								   $txPwrLoWarn,
								   $txPwrHiWarn), 
				critical => sprintf("%.2f:%.2f",
								   $txPwrLoAlarm,
								   $txPwrHiAlarm)
				);
		
		$np->add_perfdata(label => "temperature", 
				value => $ifinfo->{temperature}, 
				min => sprintf("%.2f", $tempLoAlarm),
				max => sprintf("%.2f", $tempHiAlarm),
				warning => sprintf("%.2f:%.2f", 
								   $tempLoWarn,
								   $tempHiWarn), 
				critical => sprintf("%.2f:%.2f",
								   $tempLoAlarm,
								   $tempHiAlarm)
				);

	}	

	#----------------------------------------
	# Metrics Summary
	#----------------------------------------
	my $metrics = sprintf("Laser Bias current: %s mA /RX power: %s dBm / TX power: %s dBm / Temperature: %s degrees C",
				$ifinfo->{currentBias},
				$ifinfo->{rxPower},
				$ifinfo->{txPower},
				$ifinfo->{temperature},
	);
	#----------------------------------------
	# Status Checks
	#----------------------------------------

	my $code;

	my $prefix = " ";

	$np->add_message(OK,'');
	if (($code = $np->check_threshold(check => $ifinfo->{currentBias}, 
			warning => "$currentBiasLoWarn:$currentBiasHiWarn", 
			critical => "$currentBiasLoAlarm:$currentBiasHiAlarm")) != OK)
		{
			$np->add_message($code, $prefix . '[BIAS CURRENT]');
		}

	if (($code = $np->check_threshold(check => $ifinfo->{rxPower}, 
			warning => "$rxPwrLoWarn:$rxPwrHiWarn", 					   
			critical => "$rxPwrLoAlarm:$rxPwrHiAlarm")) != OK)
		{
			$np->add_message($code, $prefix . '[RX POWER]');
		}
	
	if (($code = $np->check_threshold(check => $ifinfo->{txPower}, 
			warning => "$txPwrLoWarn:$txPwrHiWarn", 
			critical => "$txPwrLoAlarm:$txPwrHiAlarm")) != OK)
		{
			$np->add_message($code, $prefix  . '[TX POWER]');
		}		
	
	if (($code = $np->check_threshold(check => $ifinfo->{temperature}, 
			warning => "$tempLoWarn:$tempHiWarn", 
			critical => "$tempLoAlarm:$tempHiAlarm")) != OK)
		{
			$np->add_message($code, $prefix  . '[Temperature]');
		}			

	my ($exit_code, $exit_message) = $np->check_messages();

	$exit_message = $prefix . join(' ', ($exit_message, $metrics));
	$exit_message =~ s/^ *//;

	$np->nagios_exit($exit_code, $exit_message);
}


#------------ Main program ------------------------
my $np = Nagios::Monitoring::Plugin->new(
	shortname => 'OPTICAL-DOM',
	usage => "usage: check_dom <options> -H <host_address> -i interface --os <Juniper|HP>\n   use --help for more info",
	plugin => 'OPTICAL-DOM',
	version => '1.0'
);

#----------------------------------------
# Option Parsing
#----------------------------------------

$np->add_arg(
	spec => 'hostname|H=s',
	help => "-H, --hostname=<host_address>\n   Hostname to check",
	required => 1,
);

$np->add_arg(
	spec => 'interface|i=s',
	help => "-i <interface_name>\n   Interface to check (ex: GigabitEthernet0/1)",
	required => 1
);

$np->add_arg(
	spec => 'os=s',
	help => "--os <Operating system>\n   Device OS (ex: Juniper/HP)",
	required => 1
);

$np->add_arg(
	spec => 'port|p=s',
	help => "-p, --port=<snmp_port>\n   SNMP port (default: 161)",
	default => 161,
);

# IPv4/IPv6

$np->add_arg(
	spec => 'ipv4|4',
	help => "-4\n   use IPv4 (default)",
);

$np->add_arg(
	spec => 'ipv6|6',
	help => "-6\n   use IPv6",
);

# SNMPv1/2

$np->add_arg(
	spec => 'protocol|P=s',
	help => "-P, --protocol=[1|2|3]\n   SNMP protocol version ('2c' also accepted)",
	required => 1,
	default => 2,
);

$np->add_arg(
	spec => 'community|C=s',
	help => "-C, --community=<snmp_community>\n   SNMP community (SNMP version 1 or 2 only)",
	required => 1,
	default => 'public',
);

# SNMPv3

$np->add_arg(
	spec => 'username=s',
	help => "--username=<snmp_username>\n   SNMP username (SNMP version 3)",
);

$np->add_arg(
	spec => 'authkey=s',
	help => "--authkey=<snmp_authkey>\n   SNMP authkey (SNMP version 3)",
);

$np->add_arg(
	spec => 'authpassword=s',
	help => "--authpassord=<snmp_authpassword>\n   SNMP authpassword (SNMP version 3)",
);

$np->add_arg(
	spec => 'authprotocol=s',
	help => "--authprotocol=<snmp_authprotocol>\n   SNMP authprotocol (SNMP version 3)",
);

$np->add_arg(
	spec => 'privkey=s',
	help => "--privkey=<snmp_privkey>\n   SNMP privkey (SNMP version 3)",
);

$np->add_arg(
	spec => 'privpassword=s',
	help => "--privpassword=<snmp_privpassword>\n   SNMP privpassword (SNMP version 3)",
	default => undef
);

$np->add_arg(
	spec => 'privprotocol=s',
	help => "--privprotocol=<snmp_privprotocol>\n   SNMP privprotocol (SNMP version 3)",
);

# other

$np->add_arg(
	spec => 'noperfdata|F',
	help => "-F, --noperfdata\n   Don't output performance data",
);

# $np->add_arg(
# 	spec => 'oldcounters|o',
# 	help => "-o, --oldcounters\n   Use old 32-bit counters (deprecated) (default: no)",
# );

$np->add_arg(
	spec => 'warnifcritical',
	help => "--warnifcritical\n   Returns a WARNING instead of CRITICAL on interface status (default: no)",
);

$np->add_arg(
	spec => 'datadir|d=s',
	help => "-d <directory>, --datadir=<directory>\n   Data directory for persistent performance data (default: $STATEDIR)",
	required => 1,
	default => $STATEDIR
);

# modes

# Threshold
$np->add_arg(
	spec => 'powerdelta=f',
	help => "max_power=PwrHiAlarm - powerdelta\n min_power=PwrLowAlarm + powerdelta\n",
);

$np->add_arg(
	spec => 'currentdelta=f',
	help => "max_current=CurrentHiAlarm - currentdelta\n min_current=CurrentLowAlarm + currentdelta\n",
);

$np->add_arg(
	spec => 'tempdelta=f',
	help => "max_temperature=tempHiAlarm - tempdelta\n min_current=tempLowAlarm + tempdelta\n",
);

$np->getopts();

# Safety Net
alarm $np->opts->timeout;


#----------------------------------------
# IP Transport Domain
#----------------------------------------

my $domain = 'udp4';

if (defined $np->opts->ipv6)
{
	if (defined $np->opts->ipv4)
	{
		$np->nagios_die('options -4 and -6 are mutually exclusive');
	}
	$domain = 'udp6';
}

#----------------------------------------
# SNMP Session
#----------------------------------------


my ($snmp_session, $snmp_error);

if ($np->opts->protocol eq '1'
	|| $np->opts->protocol eq '2'
	|| $np->opts->protocol eq '2c')
{
	($snmp_session, $snmp_error) = Net::SNMP->session(
		-hostname => $np->opts->hostname,
		-port => $np->opts->port,
		-domain => $domain,
		-version => ($np->opts->protocol eq '2c' ? '2' : $np->opts->protocol),
		-community => $np->opts->community,
	);
}
elsif ($np->opts->protocol eq '3')
{
	($snmp_session, $snmp_error) = Net::SNMP->session(
		-hostname => $np->opts->hostname,
		-port => $np->opts->port,
		-domain => $domain,
		-version => $np->opts->protocol,
		-username => $np->opts->username,
		-authkey => $np->opts->authkey,
		-authpassword => $np->opts->authpassword,
		-authprotocol => $np->opts->authprotocol,
		-privkey => $np->opts->privkey,
		-privpassword => $np->opts->privpassword,
		-privprotocol => $np->opts->privprotocol,
	);
}
else
{
	$np->nagios_die("invalid snmp protocol");
}

$np->nagios_die($snmp_error) if (!defined $snmp_session);


#----------------------------------------
# Cache Directory
#----------------------------------------

if (! -w $np->opts->datadir)
{
	$np->nagios_die("Unable to write to data directory" . $np->opts->datadir);
}

my $ifid;
$ifid = get_ifid($np, $snmp_session, $np->opts->interface);
$np->nagios_die('interface not found') if (!defined $ifid);

#----------------------------------------
# Optics mode
#----------------------------------------
get_optics($np, $snmp_session, $ifid, $np->opts->os);



