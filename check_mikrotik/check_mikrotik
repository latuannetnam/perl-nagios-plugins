#!/usr/bin/perl
#
#    check_interface nagios plugin
#    Copyright (C) 2018 Le Anh Tuan (tuan.la@netnam.vn/latuannetnam@gmail.com)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
use strict;
use warnings;
use 5.008;
use Nagios::Monitoring::Plugin;
use Net::SNMP;
use Data::Dumper;

my $STATEDIR = '/var/tmp';

my $OIDS;

my $OIDS_USER = {
	casnActiveTableEntries => '.1.3.6.1.4.1.9.9.150.1.1.1.0',
};

my $OIDS_HEALTH = {
	mtxrHlTemperature => '.1.3.6.1.4.1.14988.1.1.3.10.0',
	mtxrHlProcessorTemperature => '.1.3.6.1.4.1.14988.1.1.3.11.0',
	mtxrHlPower => '.1.3.6.1.4.1.14988.1.1.3.12.0',
	mtxrHlCurrent => '.1.3.6.1.4.1.14988.1.1.3.13.0',
	mtxrHlProcessorFrequency => '.1.3.6.1.4.1.14988.1.1.3.14.0', 
	mtxrHlFanSpeed1 =>  '.1.3.6.1.4.1.14988.1.1.3.17.0',
};

my $OIDS_MEMORY = {
	hrStorageSize => '.1.3.6.1.2.1.25.2.3.1.5.65536',
	hrStorageUsed => '.1.3.6.1.2.1.25.2.3.1.6.65536',
};



sub unit_value
{
	my $value = shift;
	my $unit = (shift or '');
	my $multiplier = (shift or 1000);
	my $digits = (shift or 2);
	my @symbols = ('', 'k', 'M', 'G', 'T', 'P');
	my $sidx = 0;

	while ($value >= $multiplier && $sidx < @symbols)
	{
		$value /= $multiplier;
		$sidx++;
	}

	return sprintf("%.${digits}f%s%s", $value, $symbols[$sidx], $unit);
}

sub compute_realspeed
{
	my $ifinfo = shift;

	if ($ifinfo->{ifSpeed} == 4294967295)
	{
		return $ifinfo->{ifHighSpeed} * 1000000;
	}

	return $ifinfo->{ifSpeed};
}

sub sanitize_fname($)
{
	my $name = shift;
	$name =~ s/[^0-9a-z_-]/_/gi;
	return $name;
}


sub get_active_users($$)
{
	my $np = shift or die;
	my $snmp_session = shift or die;
	my $result = $snmp_session->get_request(
		-varbindlist => [
			"$OIDS->{casnActiveTableEntries}",
		]
	);
	$snmp_session->close();

	$np->nagios_die('get_active_users: ' . $snmp_session->error()) if (!defined $result);

	my 	$info = $result->{"$OIDS->{casnActiveTableEntries}"};
	# print Data::Dumper->new([$result])->Terse(1)->Purity(1)->Dump();
	
	# print("active users:$info");
	#----------------------------------------
	# Performance Data
	#----------------------------------------
	if (!$np->opts->noperfdata)
	{
		$np->add_perfdata(label => "active_users", value => $info, warning => $np->opts->warn, critical => $np->opts->critical);
	}

	#----------------------------------------
	# Metrics Summary
	#----------------------------------------
	my $metrics;
	$metrics = "active users: $info";

	#----------------------------------------
	# Status Checks
	#----------------------------------------

	my $code;

	my $prefix = " ";

	$np->add_message(OK,'');

	if (($code = $np->check_threshold(check => $info, warning => $np->opts->warn, critical => $np->opts->critical)) != OK)
		{
			$np->add_message($code, $prefix . ' [USERS]');
		}

	my ($exit_code, $exit_message) = $np->check_messages();

	$exit_message = $prefix . join(' ', ($exit_message, $metrics));
	$exit_message =~ s/^ *//;

	$np->nagios_exit($exit_code, $exit_message);
	
}

sub get_health($$)
{
	my $np = shift or die;
	my $snmp_session = shift or die;
	my @oids = values $OIDS;
	my $result = $snmp_session->get_request(-varbindlist => [@oids]);
	$snmp_session->close();
	$np->nagios_die('get_health: ' . $snmp_session->error()) if (!defined $result);

	my 	$info = {};
	foreach my $item (keys %$OIDS)
	{
		$info->{$item} = $result->{"$OIDS->{$item}"};
	}

	# print Data::Dumper->new([$result])->Terse(1)->Purity(1)->Dump();
	# $np->nagios_exit(OK,'');
	
	
	#----------------------------------------
	# Performance Data
	#----------------------------------------
	my $temperature = int(($info->{mtxrHlTemperature} - 32)/1.8);
	my $processor_temperature = int(($info->{mtxrHlProcessorTemperature} - 32)/1.8);
	if (!$np->opts->noperfdata)
	{
		# $np->add_perfdata(label => "active_users", value => $info, warning => $np->opts->warn, critical => $np->opts->critical);
		$np->add_perfdata(label => "temperature", value => $temperature);
		$np->add_perfdata(label => "processor_temperature", value => $processor_temperature);
		$np->add_perfdata(label => "power", value => $info->{mtxrHlPower});
		$np->add_perfdata(label => "current", value => $info->{mtxrHlCurrent});
		$np->add_perfdata(label => "processor_freq", value => $info->{mtxrHlProcessorFrequency});
		$np->add_perfdata(label => "fan_speed", value => $info->{mtxrHlFanSpeed1});
	}

	#----------------------------------------
	# Metrics Summary
	#----------------------------------------
	my $metrics;
	$metrics = "temperature: $temperature";

	#----------------------------------------
	# Status Checks
	#----------------------------------------

	my $code;

	my $prefix = " ";

	$np->add_message(OK,'');

	# if (($code = $np->check_threshold(check => $info, warning => $np->opts->warn, critical => $np->opts->critical)) != OK)
	# 	{
	# 		$np->add_message($code, $prefix . ' [USERS]');
	# 	}

	my ($exit_code, $exit_message) = $np->check_messages();

	$exit_message = $prefix . join(' ', ($exit_message, $metrics));
	$exit_message =~ s/^ *//;

	$np->nagios_exit($exit_code, $exit_message);
	
}

sub get_memory($$)
{
	my $np = shift or die;
	my $snmp_session = shift or die;
	my @oids = values $OIDS;
	my $result = $snmp_session->get_request(-varbindlist => [@oids]);
	$snmp_session->close();
	$np->nagios_die('get_memory: ' . $snmp_session->error()) if (!defined $result);

	my 	$info = {};
	foreach my $item (keys %$OIDS)
	{
		$info->{$item} = $result->{"$OIDS->{$item}"};
	}

	# print Data::Dumper->new([$result])->Terse(1)->Purity(1)->Dump();
	# $np->nagios_exit(OK,'');
	
	
	#----------------------------------------
	# Performance Data
	#----------------------------------------
	my $usage = $info->{hrStorageUsed}*100/$info->{hrStorageSize};
	if (!$np->opts->noperfdata)
	{
		# $np->add_perfdata(label => "active_users", value => $info, warning => $np->opts->warn, critical => $np->opts->critical);
		$np->add_perfdata(label => "usage", value => sprintf("%.2f", $usage), uom => "%", warning => $np->opts->warn, critical => $np->opts->critical);
		$np->add_perfdata(label => "memory_used", value => $info->{hrStorageUsed}, min => 0, max => $info->{hrStorageSize});
	}

	#----------------------------------------
	# Metrics Summary
	#----------------------------------------
	my $metrics;
	$metrics = sprintf("memory used: $info->{hrStorageUsed} (%.2f %%)", $usage);

	#----------------------------------------
	# Status Checks
	#----------------------------------------

	my $code;

	my $prefix = " ";

	$np->add_message(OK,'');

	if (($code = $np->check_threshold(check => $usage, warning => $np->opts->warn, critical => $np->opts->critical)) != OK)
		{
			$np->add_message($code, $prefix . ' [% USED]');
		}

	my ($exit_code, $exit_message) = $np->check_messages();

	$exit_message = $prefix . join(' ', ($exit_message, $metrics));
	$exit_message =~ s/^ *//;

	$np->nagios_exit($exit_code, $exit_message);
	
}



#------------ Main program ------------------------
my $np = Nagios::Monitoring::Plugin->new(
	shortname => 'MIKROTIK',
	usage => "usage: check_mikrotik <options> -H <host_address> -m <mode>\n   use --help for more info",
	plugin => 'MIKROTIK',
	version => '1.0'
);

#----------------------------------------
# Option Parsing
#----------------------------------------

$np->add_arg(
	spec => 'hostname|H=s',
	help => "-H, --hostname=<host_address>\n   Hostname to check",
	required => 1,
	
);

$np->add_arg(
	spec => 'port|p=s',
	help => "-p, --port=<snmp_port>\n   SNMP port (default: 161)",
	default => 161,
);

# IPv4/IPv6

$np->add_arg(
	spec => 'ipv4|4',
	help => "-4\n   use IPv4 (default)",
);

$np->add_arg(
	spec => 'ipv6|6',
	help => "-6\n   use IPv6",
);

# SNMPv1/2

$np->add_arg(
	spec => 'protocol|P=s',
	help => "-P, --protocol=[1|2|3]\n   SNMP protocol version ('2c' also accepted)",
	required => 1,
	default => 2,
);

$np->add_arg(
	spec => 'community|C=s',
	help => "-C, --community=<snmp_community>\n   SNMP community (SNMP version 1 or 2 only)",
	required => 1,
	default => 'public',
);

# SNMPv3

$np->add_arg(
	spec => 'username=s',
	help => "--username=<snmp_username>\n   SNMP username (SNMP version 3)",
);

$np->add_arg(
	spec => 'authkey=s',
	help => "--authkey=<snmp_authkey>\n   SNMP authkey (SNMP version 3)",
);

$np->add_arg(
	spec => 'authpassword=s',
	help => "--authpassord=<snmp_authpassword>\n   SNMP authpassword (SNMP version 3)",
);

$np->add_arg(
	spec => 'authprotocol=s',
	help => "--authprotocol=<snmp_authprotocol>\n   SNMP authprotocol (SNMP version 3)",
);

$np->add_arg(
	spec => 'privkey=s',
	help => "--privkey=<snmp_privkey>\n   SNMP privkey (SNMP version 3)",
);

$np->add_arg(
	spec => 'privpassword=s',
	help => "--privpassword=<snmp_privpassword>\n   SNMP privpassword (SNMP version 3)",
	default => undef
);

$np->add_arg(
	spec => 'privprotocol=s',
	help => "--privprotocol=<snmp_privprotocol>\n   SNMP privprotocol (SNMP version 3)",
);

# other

$np->add_arg(
	spec => 'noperfdata|F',
	help => "-F, --noperfdata\n   Don't output performance data",
);

$np->add_arg(
	spec => 'warn|w=s',
	help => "-w, --warn\n   WARNING threshold",
);
$np->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical\n   CRITICAL threshold",
);

$np->add_arg(
	spec => 'warnifcritical',
	help => "--warnifcritical\n   Returns a WARNING instead of CRITICAL on interface status (default: no)",
);

$np->add_arg(
	spec => 'datadir|d=s',
	help => "-d <directory>, --datadir=<directory>\n   Data directory for persistent performance data (default: $STATEDIR)",
	required => 1,
	default => $STATEDIR
);

$np->add_arg(
	spec => 'oldcounters|o',
	help => "-o, --oldcounters\n   Use old 32-bit counters (deprecated) (default: no)",
);

$np->add_arg(
	spec => 'modes|l',
	help => "-l, --modes\n   List check modes.",
);

$np->add_arg(
	spec => 'mode|m=s',
	help => "-m, --mode\n   Check modes.",
	required => 1,
	default => 'active-users',
);




$np->getopts();

# Safety Net
alarm $np->opts->timeout;

#----------------------------------------
# List mode
#----------------------------------------
if (defined $np->opts->modes)
{
	print "Mode list:\n";
	print "active-users: check active hotspot users \n";
	print "memory: check memory \n";
	print "health: check health (temperature, power ..) \n";
	$np->nagios_exit(OK,'');
}

#----------------------------------------
# IP Transport Domain
#----------------------------------------

my $domain = 'udp4';

if (defined $np->opts->ipv6)
{
	if (defined $np->opts->ipv4)
	{
		$np->nagios_die('options -4 and -6 are mutually exclusive');
	}
	$domain = 'udp6';
}

#----------------------------------------
# SNMP Session
#----------------------------------------


my ($snmp_session, $snmp_error);

if ($np->opts->protocol eq '1'
	|| $np->opts->protocol eq '2'
	|| $np->opts->protocol eq '2c')
{
	($snmp_session, $snmp_error) = Net::SNMP->session(
		-hostname => $np->opts->hostname,
		-port => $np->opts->port,
		-domain => $domain,
		-version => ($np->opts->protocol eq '2c' ? '2' : $np->opts->protocol),
		-community => $np->opts->community,
	);
}
elsif ($np->opts->protocol eq '3')
{
	($snmp_session, $snmp_error) = Net::SNMP->session(
		-hostname => $np->opts->hostname,
		-port => $np->opts->port,
		-domain => $domain,
		-version => $np->opts->protocol,
		-username => $np->opts->username,
		-authkey => $np->opts->authkey,
		-authpassword => $np->opts->authpassword,
		-authprotocol => $np->opts->authprotocol,
		-privkey => $np->opts->privkey,
		-privpassword => $np->opts->privpassword,
		-privprotocol => $np->opts->privprotocol,
	);
}
else
{
	$np->nagios_die("invalid snmp protocol");
}

$np->nagios_die($snmp_error) if (!defined $snmp_session);


#----------------------------------------
# Cache Directory
#----------------------------------------

if (! -w $np->opts->datadir)
{
	$np->nagios_die("Unable to write to data directory" . $np->opts->datadir);
}




#----------------------------------------
# Active users mode
#----------------------------------------

if ($np->opts->mode eq "active-users")
{
	$OIDS = $OIDS_USER;
	get_active_users($np, $snmp_session);
}
elsif ($np->opts->mode eq "health")
{
#    print "Getting health\n";
   $OIDS = $OIDS_HEALTH;
   get_health($np, $snmp_session);
}

elsif ($np->opts->mode eq "memory")
{
#    print "Getting health\n";
   $OIDS = $OIDS_MEMORY;
   get_memory($np, $snmp_session);
}
else
{
	$np->nagios_exit(OK,'');
}




