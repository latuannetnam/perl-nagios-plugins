#!/usr/bin/perl -w
#
#    check_uptime nagios plugin
#    Copyright (C) 2012 Nicolas Limage
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
use strict;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
	shortname => 'UPTIME',
	usage => 'Usage: %s  [ -v|--verbose ] [-t <timeout>] [ -c|--critical=<critical threshold> ] [ -w|--warning=<warning threshold> ]',
	version => '1.0',
	license => 'GPL',
	timeout => 15
);

$np->add_arg(
	spec => 'warning|w=s',
	help => "-w, --warning=INTEGER:INTEGER\n   Warning Uptime"
);

$np->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical=INTEGER:INTEGER\n   Critical Uptime"
);

$np->getopts;

alarm $np->opts->timeout;

my $uptime_output=`LANG=C uptime`;
#$uptime_output=' 16:03:34 up 30 days,  3:57, 20 users,  load average: 0.28, 0.19, 0.57';
#$uptime_output=' 16:03:34 up   57 min, 20 users,  load average: 0.28, 0.19, 0.57';
my ($days, $hours, $mins);

if ($uptime_output =~ /up\s+(\d+)\s+min/)
{
	$days = 0;
	$hours = 0;
	$mins = $1;
}
elsif ($uptime_output =~ /up\s+(\d+):(\d+)/)
{
	$days = 0;
	$hours = $1;
	$mins = $2;
}
elsif ($uptime_output =~ /up\s+(\d+)\s+days?,\s+(\d+)\s+min/)
{
	$days = $1;
	$hours = 0;
	$mins = $2;
}
elsif ($uptime_output =~ /up\s+(\d+)\s+days?,\s+(\d+):(\d+)/)
{
	$days = $1;
	$hours = $2;
	$mins = $3;
}
else
{
	$np->nagios_exit(UNKNOWN, 'parse error');
}

my $upmins = (($days * 24 + $hours) * 60) + $mins;

$np->add_perfdata( label => "uptime", value => $upmins * 60, uom => "s");

$np->nagios_exit(
	return_code => $np->check_threshold($upmins),
	message => "Up for $days days $hours hours $mins minutes"
);
