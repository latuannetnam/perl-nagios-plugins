#!/usr/bin/perl
#
#    check_iet nagios plugin
#    Copyright (C) 2012 Nicolas Limage
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
use strict;
use warnings;
#use lib '/usr/lib/nagios/plugins/lib';
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
	shortname => 'SYSCTL',
	usage => "usage: check_sysctl",
	plugin => 'SYSCTL',
	version => '1.0'
);

#----------------------------------------
# Option Parsing
#----------------------------------------

$np->add_arg(
  spec => 'warning|w=s',
  help => "-w, --warn=INTEGER:INTEGER\n   the warning threshold\n"
              . " See http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT "
              . "for the threshold format. ",
);

$np->add_arg(
  spec => 'critical|c=s',
  help => "-c, --critical=INTEGER:INTEGER\n   the critical threshold\n"
              . " See http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT "
              . "for the threshold format. ",
);

$np->add_arg(
  spec => 'key|k=s',
  help => "-k, --key=KEY\n   the sysctl key to consider\n",
);

$np->add_arg(
  spec => 'perfdata|p',
  help => "-p, --perfdata\n   enable perfdata\n"
);

$np->getopts();

# Safety Net
alarm $np->opts->timeout;
sub log_debug($) { print((shift) . "\n"); }

if ($np->opts->key !~ /^[a-z0-9._-]+$/)
{
  $np->nagios_die(sprintf("'%s' is not a valid sysctl key", $np->opts->key));
}

#----------------------------------------
# Probing Values
#----------------------------------------

my $out = `sysctl $np->opts->key`;
my $value;

if ($out =~ /^(\S+) = (\d+)$/)
{
  $value = $2;
}
else
{
  $np->nagios_die("invalid sysctl output");
}

#----------------------------------------
# Health Checks
#----------------------------------------
my $code;

$code = $np->check_threshold(check => $value, warning => $np->opts->warning, critical => $np->opts->critical);
$np->add_message($code, sprintf("%s = %s", $np->opts->key, $value)) if ($code != OK);

#----------------------------------------
# Performance Data
#----------------------------------------

$np->add_perfdata(label => $np->opts->key, value => $value);

#----------------------------------------
# Status Checks
#----------------------------------------
$np->add_message(OK, sprintf("%s = %s", $np->opts->key, $value));
my ($exit_code, $exit_message) = $np->check_messages(join => ', ');
$np->nagios_exit($exit_code, $exit_message);
